#!/usr/bin/env node

/**
 * Module dependencies.
 */

import debug from "debug";
import http from "http";
import {app} from "../app.js";
import * as services from "../services/index.js";
import {sql} from "../client.js";

// register all services
Object.entries(services).forEach(([name, router]) => {
  app.use(`/${name}`, router);
});

const debugServer = debug("warehouse-api:server");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debugServer("Listening on " + bind);
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// Gracefull termination

["SIGTERM", "SIGINT"].forEach((event) => {
  process.on(event, async () => {
    debugServer(`Event ${event} has been triggered. Gracefully shutting down.`);
    await sql.end();
    debugServer(`Database connection has been ended.`);
    server.close((error) => {
      if (error) {
        debugServer(`An error occured during the server shutdown.`);
        return process.exit(1);
      }

      debugServer(`Server is shutting down.`);
      process.exit(0);
    });
  });
});
